///////////////////////////////////////////////////////////////////////////////
// FILE: metal.h
//
// AUTHORS:
// Joseph Gibson / <joseph.gibson@nasa.gov>
///////////////////////////////////////////////////////////////////////////////

///////////////////////////////////////////////////////////////////////////////
/// @file
///
/// @brief  Metal material class
///////////////////////////////////////////////////////////////////////////////

#ifndef METAL_H
#define METAL_H

///////////////////////////////////////////////////////////////////////////////
// INCLUDES
///////////////////////////////////////////////////////////////////////////////
#include "material.h"
#include "utilities.h"

///////////////////////////////////////////////////////////////////////////////
// CLASSES
///////////////////////////////////////////////////////////////////////////////
class Metal : public Material {
public:
    Metal(const vec3 & a) : albedo(a) {}

    virtual bool scatter(const Ray & ray, const HitRecord & record, vec3 & attenuation, Ray & scattered) const {
        vec3 reflected = Reflect(unit_vector(ray.direction()), record.normal);
        scattered = Ray(record.p, reflected);
        attenuation = albedo;
        return (dot(scattered.direction(), record.normal) > 0);
    }

    vec3 albedo;    ///< Measure of diffuse reflection
};

#endif//METAL_H
